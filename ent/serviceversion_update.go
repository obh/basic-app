// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"services/ent/predicate"
	"services/ent/service"
	"services/ent/serviceversion"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ServiceVersionUpdate is the builder for updating ServiceVersion entities.
type ServiceVersionUpdate struct {
	config
	hooks    []Hook
	mutation *ServiceVersionMutation
}

// Where appends a list predicates to the ServiceVersionUpdate builder.
func (svu *ServiceVersionUpdate) Where(ps ...predicate.ServiceVersion) *ServiceVersionUpdate {
	svu.mutation.Where(ps...)
	return svu
}

// SetName sets the "name" field.
func (svu *ServiceVersionUpdate) SetName(s string) *ServiceVersionUpdate {
	svu.mutation.SetName(s)
	return svu
}

// SetCreatedOn sets the "created_on" field.
func (svu *ServiceVersionUpdate) SetCreatedOn(t time.Time) *ServiceVersionUpdate {
	svu.mutation.SetCreatedOn(t)
	return svu
}

// SetServiceID sets the "service_id" field.
func (svu *ServiceVersionUpdate) SetServiceID(i int) *ServiceVersionUpdate {
	svu.mutation.SetServiceID(i)
	return svu
}

// SetService sets the "service" edge to the Service entity.
func (svu *ServiceVersionUpdate) SetService(s *Service) *ServiceVersionUpdate {
	return svu.SetServiceID(s.ID)
}

// Mutation returns the ServiceVersionMutation object of the builder.
func (svu *ServiceVersionUpdate) Mutation() *ServiceVersionMutation {
	return svu.mutation
}

// ClearService clears the "service" edge to the Service entity.
func (svu *ServiceVersionUpdate) ClearService() *ServiceVersionUpdate {
	svu.mutation.ClearService()
	return svu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (svu *ServiceVersionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, ServiceVersionMutation](ctx, svu.sqlSave, svu.mutation, svu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (svu *ServiceVersionUpdate) SaveX(ctx context.Context) int {
	affected, err := svu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (svu *ServiceVersionUpdate) Exec(ctx context.Context) error {
	_, err := svu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (svu *ServiceVersionUpdate) ExecX(ctx context.Context) {
	if err := svu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (svu *ServiceVersionUpdate) check() error {
	if _, ok := svu.mutation.ServiceID(); svu.mutation.ServiceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ServiceVersion.service"`)
	}
	return nil
}

func (svu *ServiceVersionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := svu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(serviceversion.Table, serviceversion.Columns, sqlgraph.NewFieldSpec(serviceversion.FieldID, field.TypeInt))
	if ps := svu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := svu.mutation.Name(); ok {
		_spec.SetField(serviceversion.FieldName, field.TypeString, value)
	}
	if value, ok := svu.mutation.CreatedOn(); ok {
		_spec.SetField(serviceversion.FieldCreatedOn, field.TypeTime, value)
	}
	if svu.mutation.ServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   serviceversion.ServiceTable,
			Columns: []string{serviceversion.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := svu.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   serviceversion.ServiceTable,
			Columns: []string{serviceversion.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, svu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{serviceversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	svu.mutation.done = true
	return n, nil
}

// ServiceVersionUpdateOne is the builder for updating a single ServiceVersion entity.
type ServiceVersionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ServiceVersionMutation
}

// SetName sets the "name" field.
func (svuo *ServiceVersionUpdateOne) SetName(s string) *ServiceVersionUpdateOne {
	svuo.mutation.SetName(s)
	return svuo
}

// SetCreatedOn sets the "created_on" field.
func (svuo *ServiceVersionUpdateOne) SetCreatedOn(t time.Time) *ServiceVersionUpdateOne {
	svuo.mutation.SetCreatedOn(t)
	return svuo
}

// SetServiceID sets the "service_id" field.
func (svuo *ServiceVersionUpdateOne) SetServiceID(i int) *ServiceVersionUpdateOne {
	svuo.mutation.SetServiceID(i)
	return svuo
}

// SetService sets the "service" edge to the Service entity.
func (svuo *ServiceVersionUpdateOne) SetService(s *Service) *ServiceVersionUpdateOne {
	return svuo.SetServiceID(s.ID)
}

// Mutation returns the ServiceVersionMutation object of the builder.
func (svuo *ServiceVersionUpdateOne) Mutation() *ServiceVersionMutation {
	return svuo.mutation
}

// ClearService clears the "service" edge to the Service entity.
func (svuo *ServiceVersionUpdateOne) ClearService() *ServiceVersionUpdateOne {
	svuo.mutation.ClearService()
	return svuo
}

// Where appends a list predicates to the ServiceVersionUpdate builder.
func (svuo *ServiceVersionUpdateOne) Where(ps ...predicate.ServiceVersion) *ServiceVersionUpdateOne {
	svuo.mutation.Where(ps...)
	return svuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (svuo *ServiceVersionUpdateOne) Select(field string, fields ...string) *ServiceVersionUpdateOne {
	svuo.fields = append([]string{field}, fields...)
	return svuo
}

// Save executes the query and returns the updated ServiceVersion entity.
func (svuo *ServiceVersionUpdateOne) Save(ctx context.Context) (*ServiceVersion, error) {
	return withHooks[*ServiceVersion, ServiceVersionMutation](ctx, svuo.sqlSave, svuo.mutation, svuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (svuo *ServiceVersionUpdateOne) SaveX(ctx context.Context) *ServiceVersion {
	node, err := svuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (svuo *ServiceVersionUpdateOne) Exec(ctx context.Context) error {
	_, err := svuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (svuo *ServiceVersionUpdateOne) ExecX(ctx context.Context) {
	if err := svuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (svuo *ServiceVersionUpdateOne) check() error {
	if _, ok := svuo.mutation.ServiceID(); svuo.mutation.ServiceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ServiceVersion.service"`)
	}
	return nil
}

func (svuo *ServiceVersionUpdateOne) sqlSave(ctx context.Context) (_node *ServiceVersion, err error) {
	if err := svuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(serviceversion.Table, serviceversion.Columns, sqlgraph.NewFieldSpec(serviceversion.FieldID, field.TypeInt))
	id, ok := svuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ServiceVersion.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := svuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, serviceversion.FieldID)
		for _, f := range fields {
			if !serviceversion.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != serviceversion.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := svuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := svuo.mutation.Name(); ok {
		_spec.SetField(serviceversion.FieldName, field.TypeString, value)
	}
	if value, ok := svuo.mutation.CreatedOn(); ok {
		_spec.SetField(serviceversion.FieldCreatedOn, field.TypeTime, value)
	}
	if svuo.mutation.ServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   serviceversion.ServiceTable,
			Columns: []string{serviceversion.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := svuo.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   serviceversion.ServiceTable,
			Columns: []string{serviceversion.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ServiceVersion{config: svuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, svuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{serviceversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	svuo.mutation.done = true
	return _node, nil
}
