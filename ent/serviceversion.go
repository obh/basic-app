// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"services/ent/service"
	"services/ent/serviceversion"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ServiceVersion is the model entity for the ServiceVersion schema.
type ServiceVersion struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// CreatedOn holds the value of the "created_on" field.
	CreatedOn time.Time `json:"created_on,omitempty"`
	// ServiceID holds the value of the "service_id" field.
	ServiceID int `json:"service_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ServiceVersionQuery when eager-loading is set.
	Edges        ServiceVersionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ServiceVersionEdges holds the relations/edges for other nodes in the graph.
type ServiceVersionEdges struct {
	// Service holds the value of the service edge.
	Service *Service `json:"service,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ServiceOrErr returns the Service value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ServiceVersionEdges) ServiceOrErr() (*Service, error) {
	if e.loadedTypes[0] {
		if e.Service == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: service.Label}
		}
		return e.Service, nil
	}
	return nil, &NotLoadedError{edge: "service"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ServiceVersion) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case serviceversion.FieldID, serviceversion.FieldServiceID:
			values[i] = new(sql.NullInt64)
		case serviceversion.FieldName:
			values[i] = new(sql.NullString)
		case serviceversion.FieldCreatedOn:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ServiceVersion fields.
func (sv *ServiceVersion) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case serviceversion.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sv.ID = int(value.Int64)
		case serviceversion.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				sv.Name = value.String
			}
		case serviceversion.FieldCreatedOn:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_on", values[i])
			} else if value.Valid {
				sv.CreatedOn = value.Time
			}
		case serviceversion.FieldServiceID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field service_id", values[i])
			} else if value.Valid {
				sv.ServiceID = int(value.Int64)
			}
		default:
			sv.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ServiceVersion.
// This includes values selected through modifiers, order, etc.
func (sv *ServiceVersion) Value(name string) (ent.Value, error) {
	return sv.selectValues.Get(name)
}

// QueryService queries the "service" edge of the ServiceVersion entity.
func (sv *ServiceVersion) QueryService() *ServiceQuery {
	return NewServiceVersionClient(sv.config).QueryService(sv)
}

// Update returns a builder for updating this ServiceVersion.
// Note that you need to call ServiceVersion.Unwrap() before calling this method if this ServiceVersion
// was returned from a transaction, and the transaction was committed or rolled back.
func (sv *ServiceVersion) Update() *ServiceVersionUpdateOne {
	return NewServiceVersionClient(sv.config).UpdateOne(sv)
}

// Unwrap unwraps the ServiceVersion entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sv *ServiceVersion) Unwrap() *ServiceVersion {
	_tx, ok := sv.config.driver.(*txDriver)
	if !ok {
		panic("ent: ServiceVersion is not a transactional entity")
	}
	sv.config.driver = _tx.drv
	return sv
}

// String implements the fmt.Stringer.
func (sv *ServiceVersion) String() string {
	var builder strings.Builder
	builder.WriteString("ServiceVersion(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sv.ID))
	builder.WriteString("name=")
	builder.WriteString(sv.Name)
	builder.WriteString(", ")
	builder.WriteString("created_on=")
	builder.WriteString(sv.CreatedOn.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("service_id=")
	builder.WriteString(fmt.Sprintf("%v", sv.ServiceID))
	builder.WriteByte(')')
	return builder.String()
}

// ServiceVersions is a parsable slice of ServiceVersion.
type ServiceVersions []*ServiceVersion
