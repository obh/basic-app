// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"services/ent/service"
	"services/ent/serviceversion"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ServiceVersionCreate is the builder for creating a ServiceVersion entity.
type ServiceVersionCreate struct {
	config
	mutation *ServiceVersionMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (svc *ServiceVersionCreate) SetName(s string) *ServiceVersionCreate {
	svc.mutation.SetName(s)
	return svc
}

// SetCreatedOn sets the "created_on" field.
func (svc *ServiceVersionCreate) SetCreatedOn(t time.Time) *ServiceVersionCreate {
	svc.mutation.SetCreatedOn(t)
	return svc
}

// SetServiceID sets the "service_id" field.
func (svc *ServiceVersionCreate) SetServiceID(i int) *ServiceVersionCreate {
	svc.mutation.SetServiceID(i)
	return svc
}

// SetID sets the "id" field.
func (svc *ServiceVersionCreate) SetID(i int) *ServiceVersionCreate {
	svc.mutation.SetID(i)
	return svc
}

// SetService sets the "service" edge to the Service entity.
func (svc *ServiceVersionCreate) SetService(s *Service) *ServiceVersionCreate {
	return svc.SetServiceID(s.ID)
}

// Mutation returns the ServiceVersionMutation object of the builder.
func (svc *ServiceVersionCreate) Mutation() *ServiceVersionMutation {
	return svc.mutation
}

// Save creates the ServiceVersion in the database.
func (svc *ServiceVersionCreate) Save(ctx context.Context) (*ServiceVersion, error) {
	return withHooks[*ServiceVersion, ServiceVersionMutation](ctx, svc.sqlSave, svc.mutation, svc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (svc *ServiceVersionCreate) SaveX(ctx context.Context) *ServiceVersion {
	v, err := svc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (svc *ServiceVersionCreate) Exec(ctx context.Context) error {
	_, err := svc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (svc *ServiceVersionCreate) ExecX(ctx context.Context) {
	if err := svc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (svc *ServiceVersionCreate) check() error {
	if _, ok := svc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "ServiceVersion.name"`)}
	}
	if _, ok := svc.mutation.CreatedOn(); !ok {
		return &ValidationError{Name: "created_on", err: errors.New(`ent: missing required field "ServiceVersion.created_on"`)}
	}
	if _, ok := svc.mutation.ServiceID(); !ok {
		return &ValidationError{Name: "service_id", err: errors.New(`ent: missing required field "ServiceVersion.service_id"`)}
	}
	if v, ok := svc.mutation.ID(); ok {
		if err := serviceversion.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "ServiceVersion.id": %w`, err)}
		}
	}
	if _, ok := svc.mutation.ServiceID(); !ok {
		return &ValidationError{Name: "service", err: errors.New(`ent: missing required edge "ServiceVersion.service"`)}
	}
	return nil
}

func (svc *ServiceVersionCreate) sqlSave(ctx context.Context) (*ServiceVersion, error) {
	if err := svc.check(); err != nil {
		return nil, err
	}
	_node, _spec := svc.createSpec()
	if err := sqlgraph.CreateNode(ctx, svc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	svc.mutation.id = &_node.ID
	svc.mutation.done = true
	return _node, nil
}

func (svc *ServiceVersionCreate) createSpec() (*ServiceVersion, *sqlgraph.CreateSpec) {
	var (
		_node = &ServiceVersion{config: svc.config}
		_spec = sqlgraph.NewCreateSpec(serviceversion.Table, sqlgraph.NewFieldSpec(serviceversion.FieldID, field.TypeInt))
	)
	if id, ok := svc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := svc.mutation.Name(); ok {
		_spec.SetField(serviceversion.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := svc.mutation.CreatedOn(); ok {
		_spec.SetField(serviceversion.FieldCreatedOn, field.TypeTime, value)
		_node.CreatedOn = value
	}
	if nodes := svc.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   serviceversion.ServiceTable,
			Columns: []string{serviceversion.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ServiceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ServiceVersionCreateBulk is the builder for creating many ServiceVersion entities in bulk.
type ServiceVersionCreateBulk struct {
	config
	builders []*ServiceVersionCreate
}

// Save creates the ServiceVersion entities in the database.
func (svcb *ServiceVersionCreateBulk) Save(ctx context.Context) ([]*ServiceVersion, error) {
	specs := make([]*sqlgraph.CreateSpec, len(svcb.builders))
	nodes := make([]*ServiceVersion, len(svcb.builders))
	mutators := make([]Mutator, len(svcb.builders))
	for i := range svcb.builders {
		func(i int, root context.Context) {
			builder := svcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ServiceVersionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, svcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, svcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, svcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (svcb *ServiceVersionCreateBulk) SaveX(ctx context.Context) []*ServiceVersion {
	v, err := svcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (svcb *ServiceVersionCreateBulk) Exec(ctx context.Context) error {
	_, err := svcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (svcb *ServiceVersionCreateBulk) ExecX(ctx context.Context) {
	if err := svcb.Exec(ctx); err != nil {
		panic(err)
	}
}
