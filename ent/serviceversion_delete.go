// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"services/ent/predicate"
	"services/ent/serviceversion"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ServiceVersionDelete is the builder for deleting a ServiceVersion entity.
type ServiceVersionDelete struct {
	config
	hooks    []Hook
	mutation *ServiceVersionMutation
}

// Where appends a list predicates to the ServiceVersionDelete builder.
func (svd *ServiceVersionDelete) Where(ps ...predicate.ServiceVersion) *ServiceVersionDelete {
	svd.mutation.Where(ps...)
	return svd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (svd *ServiceVersionDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, ServiceVersionMutation](ctx, svd.sqlExec, svd.mutation, svd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (svd *ServiceVersionDelete) ExecX(ctx context.Context) int {
	n, err := svd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (svd *ServiceVersionDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(serviceversion.Table, sqlgraph.NewFieldSpec(serviceversion.FieldID, field.TypeInt))
	if ps := svd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, svd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	svd.mutation.done = true
	return affected, err
}

// ServiceVersionDeleteOne is the builder for deleting a single ServiceVersion entity.
type ServiceVersionDeleteOne struct {
	svd *ServiceVersionDelete
}

// Where appends a list predicates to the ServiceVersionDelete builder.
func (svdo *ServiceVersionDeleteOne) Where(ps ...predicate.ServiceVersion) *ServiceVersionDeleteOne {
	svdo.svd.mutation.Where(ps...)
	return svdo
}

// Exec executes the deletion query.
func (svdo *ServiceVersionDeleteOne) Exec(ctx context.Context) error {
	n, err := svdo.svd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{serviceversion.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (svdo *ServiceVersionDeleteOne) ExecX(ctx context.Context) {
	if err := svdo.Exec(ctx); err != nil {
		panic(err)
	}
}
